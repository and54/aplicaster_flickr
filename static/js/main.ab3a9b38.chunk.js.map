{"version":3,"sources":["components/FlickrImage.js","components/Dashboard.js","serviceWorker.js","index.js"],"names":["FlickrImage","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","selImage","title","photos","search","time","fadeIn","fetch","resp","json","data","addPhotos","photo","setState","setInterval","changeImage","bind","pics","map","pic","push","image","farm","server","id","secret","_this2","index","Math","floor","random","length","selected","setTimeout","content","react_default","a","createElement","CardMedia","component","alt","className","Card","CardActionArea","Fade","in","CardContent","Typography","gutterBottom","variant","Component","Dashboard","render","Grid","container","spacing","direction","alignItems","justify","FlickrImage_FlickrImage","Boolean","window","location","hostname","match","ReactDOM","Dashboard_Dashboard","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wWASqBA,qBAGnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,SAAU,GACVC,MAAO,oBACPC,OAAO,GACPC,OAAQZ,EAAMY,OACdC,KAAmB,IAAbb,EAAMa,KACZC,QAAQ,GAROb,qNAaEc,MAAM,mHAAuHX,KAAKI,MAAMI,OAAO,mEAA5JI,kBACaA,EAAKC,cAAlBC,SACAP,EAASP,KAAKe,UAAUD,EAAKP,OAAOS,OAC1ChB,KAAKiB,SAAS,CAAEV,WAChBW,YAAYlB,KAAKmB,YAAYC,KAAKpB,MAAOA,KAAKI,MAAMK,MACpDT,KAAKmB,mJAGGE,GACR,IAAId,EAAS,GAOb,OANAc,EAAKC,IAAI,SAAAC,GAAG,OACVhB,EAAOiB,KAAK,CACVlB,MAAOiB,EAAIjB,MACXmB,MAAO,eAAeF,EAAIG,KAAK,qBAAqBH,EAAII,OAAO,IAAIJ,EAAIK,GAAG,IAAIL,EAAIM,OAAO,WAGtFtB,wCAGK,IAAAuB,EAAA9B,KACN+B,EAAQC,KAAKC,MAAMD,KAAKE,SAAWlC,KAAKI,MAAMG,OAAO4B,QACrDC,EAAYpC,KAAKI,MAAMG,OAAOwB,GACpC/B,KAAKiB,SAAS,CAAEP,QAAQ,IACxB2B,WAAW,WACTP,EAAKb,SAAS,CAAEZ,SAAS+B,EAASX,MAAOnB,MAAM8B,EAAS9B,MAAOI,QAAQ,KACtE,sCAIH,IAAI4B,EAAUC,EAAAC,EAAAC,cAAA,YAUd,OATIzC,KAAKI,MAAMC,WACbiC,EAAWC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACTC,UAAU,MACVC,IAAI,wBACJnB,MAAQzB,KAAKI,MAAMC,SACnBC,MAAM,wBACNuC,UAAU,WAIZN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAMD,UAAU,QACdN,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACER,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAMC,GAAKjD,KAAKI,MAAMM,QAClB4B,GAEJC,EAAAC,EAAAC,cAACS,EAAA,EAAD,KACEX,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAYC,cAAY,EAACC,QAAQ,QAAQV,UAAU,MAC/C3C,KAAKI,MAAME,iBA/DcgD,cCJpBC,oNAEnB9C,KAAO,IACPD,OAAS,YAETgD,OAAS,kBACPjB,EAAAC,EAAAC,cAAA,OAAKI,UAAU,QACbN,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CACEC,WAAS,EACTC,QAAS,EACTC,UAAU,SACVC,WAAW,SACXC,QAAQ,SACRjB,UAAU,QAEVN,EAAAC,EAAAC,cAACsB,EAAD,CAAatD,KAAOZ,EAAKY,KAAOD,OAASX,EAAKW,yCAff8C,cCOnBU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASb,OAAOjB,EAAAC,EAAAC,cAAC6B,EAAD,MAAeC,SAASC,eAAe,SD2HjD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ab3a9b38.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport './FlickrImage.css';\r\n\r\nexport default class FlickrImage extends Component {\r\n\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { \r\n      selImage: '', \r\n      title: 'Loading Images...', \r\n      photos:[], \r\n      search: props.search, \r\n      time: props.time * 1000, \r\n      fadeIn: false \r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const resp = await fetch('https://api.flickr.com/services/rest/?method=flickr.photos.search&api_key='+process.env.REACT_APP_FLICKR_KEY+'&tags='+this.state.search+'&per_page=100&page=1&format=json&nojsoncallback=1');\r\n    const data = await resp.json();\r\n    const photos = this.addPhotos(data.photos.photo);\r\n    this.setState({ photos });\r\n    setInterval(this.changeImage.bind(this), this.state.time);\r\n    this.changeImage();\r\n  };\r\n\r\n  addPhotos(pics) {\r\n    let photos = [];\r\n    pics.map(pic => \r\n      photos.push({\r\n        title: pic.title,\r\n        image: 'https://farm'+pic.farm+'.staticflickr.com/'+pic.server+'/'+pic.id+'_'+pic.secret+'.jpg'\r\n      })\r\n    );\r\n    return photos;\r\n  }\r\n\r\n  changeImage() {\r\n    const index = Math.floor(Math.random() * this.state.photos.length);\r\n    const selected =  this.state.photos[index];\r\n    this.setState({ fadeIn: false });\r\n    setTimeout(() => {\r\n      this.setState({ selImage:selected.image, title:selected.title, fadeIn: true });\r\n    }, 500);\r\n  }\r\n\r\n  render() {\r\n    let content = <div />;\r\n    if (this.state.selImage) {\r\n      content = (<CardMedia\r\n        component=\"img\"\r\n        alt=\"Contemplative Reptile\"\r\n        image={ this.state.selImage }\r\n        title=\"Contemplative Reptile\"\r\n        className=\"image\"\r\n      />);\r\n    }\r\n    return (\r\n      <Card className=\"card\">\r\n        <CardActionArea>\r\n          <Fade in={ this.state.fadeIn }>\r\n            { content }\r\n          </ Fade>\r\n          <CardContent>\r\n            <Typography gutterBottom variant=\"body2\" component=\"h2\">\r\n              { this.state.title }\r\n            </Typography>\r\n          </CardContent>\r\n        </CardActionArea>\r\n      </Card>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport FlickrImage from './FlickrImage';\r\nimport './Dashboard.css';\r\n\r\nexport default class Dashboard extends Component {\r\n\r\n  time = 5; // value in seconds\r\n  search = 'animals'; // key word to do the search\r\n\r\n  render = () => (\r\n    <div className=\"root\">\r\n      <Grid \r\n        container\r\n        spacing={0}\r\n        direction=\"column\"\r\n        alignItems=\"center\"\r\n        justify=\"center\"\r\n        className=\"grid\"\r\n      >\r\n        <FlickrImage time={ this.time } search={ this.search } />\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Dashboard from './components/Dashboard';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Dashboard />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}